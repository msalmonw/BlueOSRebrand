name: Test, Build and Deploy Images

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

on:
    workflow_dispatch:
    pull_request:
    push:
    schedule:
    # Run every 6 days to keep our caches alive
    - cron: '0 0 */6 * *'

jobs:
  deploy-raspberry-image:
    needs: deploy-docker-images
    if: github.event_name != 'pull_request' && github.repository_owner == 'msalmonw'
    timeout-minutes: 180 # Detect if it gets into an infinite loop or some unexpected state
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: self-hosted
            platform: "linux/arm/v7"
            os: "bookworm"
            image: "raspios_lite_armhf/images/raspios_lite_armhf-2024-07-04/2024-07-04-raspios-bookworm-armhf-lite.img.xz"

    runs-on: ${{ matrix.runner }}
    # The runners for this job are:
    # - pi4-builders: A Raspberry Pi OS Bullseye (32-bit).
    # - pi5-builder: A Raspberry Pi OS Bookworm lite 64-bit.
    # For pi5-ci, install docker (curl -sSL https://get.docker.com/ | sh) and follow the instructions for setting up a new runner in
    # https://github.com/bluerobotics/BlueOS-docker/settings/actions/runners/new

    steps:
      - name: Install git
        run: sudo apt install -y git

      - name: Set up Docker
        uses: docker/setup-docker@v2

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # We use our own pimod as upstream doesn't provide armv7 images
      - name: Pimod Build
        run: |
          VERSION=$GITHUB_REPOSITORY
          VERSION=${VERSION:-master}
          wget https://raw.githubusercontent.com//Nature40/pimod/master/pimod.sh && chmod +x pimod.sh
          docker run --rm --privileged \
            -v $PWD:/files \
            -e PATH=/pimod:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
            -e GITHUB_REPOSITORY=$GITHUB_REPOSITORY \
            -e VERSION=$GITHUB_REF_NAME \
            -e BASE_IMAGE=${{ matrix.image }} \
            --workdir=/files \
            --platform ${{ matrix.platform }} nature40/pimod:latest pimod.sh deploy/pimod/blueos.Pifile

      - name: Add /boot additions
        run: |
          sudo apt-get update && sudo apt-get install -y parted kpartx
          # Create mount point if it doesn't exist
          sudo mkdir -p /mnt/piboot
          # Map the image file
          LOOP_DEVICE=$(sudo kpartx -avs deploy/pimod/blueos.img | sed -E 's/.*(loop[0-9]+)p[0-9]+.*/\1/g' | head -1)
          # Mount the boot partition
          sudo mount "/dev/mapper/${LOOP_DEVICE}p1" /mnt/piboot
          # Create ssh and userconf files
          sudo cp install/boards/config.toml /mnt/piboot/custom.toml
          sudo umount /mnt/piboot
          sudo kpartx -d deploy/pimod/blueos.img
          echo "Boot partition updated successfully."

      #- name: Sanitize platform name
      #  run: echo "SANITIZED_PLATFORM=$(echo ${{ matrix.platform }} | tr '/' '-')" >> $GITHUB_ENV

      #- name: Zip image
      # if: startsWith(github.ref, 'refs/tags/')
      #  run: |
      #    sudo apt install zip
      #    zip BlueOS-raspberry-${{ env.SANITIZED_PLATFORM }}-${{ matrix.os }}.zip deploy/pimod/blueos.img

      #- name: Upload artifact
      #  uses: actions/upload-artifact@v4
      #  timeout-minutes: 120
      #  with:
      #    name: BlueOS-raspberry-${{ env.GITHUB_REF_NAME }}${{ env.SANITIZED_PLATFORM }}-${{ matrix.os }}
      #    path: deploy/pimod/blueos.img
      #    if-no-files-found: error
      #    retention-days: 7

      #- name: Upload raspberry image for release
      #  uses: svenstaro/upload-release-action@v2
      #  if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #    repo_token: ${{ secrets.GITHUB_TOKEN }}
      #    file: BlueOS-raspberry-${{ env.SANITIZED_PLATFORM }}-${{ matrix.os }}.zip
      #    tag: ${{ github.ref }}
      #    overwrite: true
      #    prerelease: true

      # This is required because docker has root permissions, which means the runner is unable to clear this cache normally
      - name: Cleanup
        if: ${{ always() }}
        run: sudo rm -rf .cache